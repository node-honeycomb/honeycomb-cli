#!/usr/bin/env node

const fs = require('fs-extra');
const path = require('path');
const program = require('commander');
const tar = require('tar');
const _ = require('lodash');
const chalk = require('chalk');
const os = require('os');

const log = require('../lib/log');
const run = require('../lib/exec');
const genAutoRouter = require('../lib/gen_auto_router').genAutoRouter;


program
  .option('--env [value]', 'can be [test|dev|daily|pre|production] default is production')
  /* .option('-p --private', '私有云打包')*/
  .option('-m --minify', '混淆、压缩代码')
  /* .option('-x --exclude', '排除不被压缩的目录')*/
  .parse(process.argv);

var env = program.env || 'production';

if (env !== 'test' && env !== 'dev' && env !== 'daily' && env !== 'pre' && env !== 'production') {
  log.error('env should be one of them: test, dev, daily, pre, production'); // eslint-disable-line
  process.exit(1);
}

// 自动生成 auto_router.js 文件
genAutoRouter({doc: true});
// build app
log.info('== start building app ==');

let pkgJson = require(path.join(process.cwd(), 'package.json'));

if (program.minify) {
  // 专有云打包，删除集团内部npm包依赖后再安装
  let localConfig = require(path.join(os.homedir(), '.honeycomb.json'));
  let innerPackages = localConfig.innerPackages || [];
  innerPackages.forEach((pkg) => {
    if (pkgJson.dependencies && pkgJson.dependencies[pkg]) {
      delete pkgJson.dependencies[pkg];
    }
  });
  fs.writeFileSync(path.join(process.cwd(), 'package.json'), JSON.stringify(pkgJson, null, 2));
}

const pack = async () => {
  // 检查是否存在makefile
  const makefilePath = [
    path.join(process.cwd(), 'Makefile'),
    path.join(process.cwd(), 'makefile'),
  ];
  let makeExsit = false;
  for (const mfp of makefilePath) {
    if (fs.existsSync(mfp)) {
      makeExsit = true;
    }
  }

  /**
   * 通过package['pack-mode] 或 package['package-mode'] 来强制控制打包模式
   */
  const packMode = pkgJson['pack-mode'] || pkgJson['package-mode'];
  let useMake = true;
  if (packMode === 'node') {
    useMake = false;
  } else if (packMode === 'make') {
    useMake = true;
  }

  if (makeExsit && useMake) {
    run(`cd ${process.cwd()} && make release env=${env}`, 'using makefile to build');
  } else {
    // 检查是否存在bin/release.js
    const releasePath = path.join(process.cwd(), 'bin/release.js');
    if (!fs.existsSync(releasePath)) {
      await fs.copy(path.join(__dirname, '..', 'lib', 'release.js'), releasePath);
    }

    let release = require(releasePath);
    // release 文件检查
    if (_.isObject(release)) {
      release = Object.keys(release).map(key => release[key]);
    }

    if (!_.isArray(release)) {
      throw Error('release.js暴露的对象不是Object或Array');
    }

    for (let fn of release) {
      if (!_.isFunction(fn)) {
        throw Error('Arrary中的对象不是Function');
      }
      await fn({env: env}, process.cwd(), {run, log, fs});
    }
  }

  log.info('last part');

  log.info('remove useless file');
  // 删除多余的config文件
  ['test', 'dev', 'daily', 'pre'].forEach(suffix => {
    const pathname = path.join(process.cwd(), 'out', 'release', 'config', `config_${suffix}.js`);
    fs.removeSync(pathname);
  });

  run('sh -c "cd out/release && if [ -f ./node_modules/.bin/framework_build ]; then ./node_modules/.bin/framework_build ' + env + '; fi"', 'call framework_build script');

  try {  // check config syntax
    const config = path.join(process.cwd(), 'out', 'release', 'config', 'config.js');
    if (fs.existsSync(config)) {
      require(config);
    }
  } catch (e) {
    log.error(`You have an error in your config_${env}.js syntax:`, e);
    process.exit(2);
  }

  // minify code
  if (program.minify) {
    run(`honeycomb minify --input ${path.join('out', 'release')}`, 'minifying code');
  }

  var dir = process.cwd();
  var pkg = require(path.join(dir, 'package.json'));
  var version = pkg.version;
  var buildNo = pkg.build || 1;
  var fileName = pkg.name + '_' + version + '_' + buildNo;

  if (/.jar$/.test(pkg.main)) {
    if (pkg.honeycomb) {
      if (pkg.honeycomb.service) {
        let flag = false;
        pkg.honeycomb.service.argv.forEach((item) => {
          if (item === 'org.springframework.boot.loader.JarLauncher') {
            flag = true;
          }
        })

        if (flag && pkg.honeycomb.service.cwd && !fs.existsSync(path.join(dir, pkg.honeycomb.service.cwd))) {
           console.log('-----ERROR----------------')
           console.log("package.json配置错误，java应用配置请查阅honeycomb文档");
           console.log('---------------------------')
           process.exit(2);
        }
      }
    }
  }

  log.info('move file to ', fileName);
  // 转移文件
  const outDir = path.join(process.cwd(), 'out');
  fs.removeSync(path.join(outDir, fileName));
  fs.renameSync(path.join(outDir, 'release'), path.join(outDir, fileName));
  log.info('begin to tgz file');
  await tar.c(
    {
      gzip: true,
      file: path.join(outDir, fileName + '.tgz'),
      strip: 1,
      cwd: outDir
    },
    [
      fileName
    ]
  );
  log.info('compress files finished. target file: ' + 'out/' + fileName + '.tgz');
  log.info('pack app success');
  process.exit(0);
};

pack().catch(e => {
  log.error(e.stack || e.message || e);
  /*eslint-disable */
  console.error(chalk.green('------------------------- TIPS ---------------------------'));
  console.error(chalk.yellow(`打包遇到问题?
推荐访问honeycomb官方文档查看常见问题解决方案:
https://www.yuque.com/honeycomb/honeycomb/faq`));
  console.error(chalk.green('-----------------------------------------------------------'));
  /* eslint-enable */
  process.exit(1);
});
